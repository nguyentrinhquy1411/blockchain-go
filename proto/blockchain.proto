syntax = "proto3";
package blockchain;
option go_package = "./proto";

// Service định nghĩa các RPC methods
service BlockchainService {
    rpc ProposeBlock(ProposeBlockRequest) returns (ProposeBlockResponse);
    rpc Vote(VoteRequest) returns (VoteResponse);
    rpc GetBlock(GetBlockRequest) returns (GetBlockResponse);
    rpc GetLatestBlock(GetLatestBlockRequest) returns (GetLatestBlockResponse);
    rpc SendTransaction(SendTransactionRequest) returns (SendTransactionResponse);
    rpc SyncBlocks(SyncBlocksRequest) returns (SyncBlocksResponse);
    rpc NotifyCommittedBlock(NotifyCommittedBlockRequest) returns (NotifyCommittedBlockResponse);
}

// Messages cho giao dịch
message Transaction {
    string sender = 1;
    string receiver = 2;
    double amount = 3;
    int64 timestamp = 4;
    bytes signature = 5;
}

// Messages cho block
message Block {
    int32 height = 1;
    string previous_hash = 2;
    string merkle_root = 3;
    int64 timestamp = 4;
    repeated Transaction transactions = 5;
    string hash = 6;
}

// Request/Response cho ProposeBlock
message ProposeBlockRequest {
    Block block = 1;
    string proposer_id = 2;
}

message ProposeBlockResponse {
    bool accepted = 1;
    string message = 2;
}

// Request/Response cho Vote
message VoteRequest {
    string block_hash = 1;
    string voter_id = 2;
    bool approve = 3;
}

message VoteResponse {
    bool success = 1;
    string message = 2;
}

// Request/Response cho GetBlock
message GetBlockRequest {
    oneof identifier {
        int32 height = 1;
        string hash = 2;
    }
}

message GetBlockResponse {
    Block block = 1;
    bool found = 2;
}

// Request/Response cho GetLatestBlock
message GetLatestBlockRequest {}

message GetLatestBlockResponse {
    Block block = 1;
    int32 height = 2;
}

// Request/Response cho SendTransaction
message SendTransactionRequest {
    Transaction transaction = 1;
}

message SendTransactionResponse {
    bool accepted = 1;
    string message = 2;
}

// Request/Response cho SyncBlocks
message SyncBlocksRequest {
    int32 from_height = 1;
    int32 to_height = 2;
}

message SyncBlocksResponse {
    repeated Block blocks = 1;
}

// Request/Response cho NotifyCommittedBlock
message NotifyCommittedBlockRequest {
    Block block = 1;
}

message NotifyCommittedBlockResponse {
    bool success = 1;
    string message = 2;
}